qbinom(0.95, size=7, prob=2/3)
pbinom(28,51,2/3)
qbinom(0.95, size=51, prob=2/3)
qbinom(0.95, size=51, prob=2/3)
qbinom(0.975, size=51, prob=2/3)
qbinom(0.975, size=7, prob=2/3)
qbinom(0.05, size=7, prob=2/3)
qbinom(0.05, size=17, prob=2/3)
qbinom(0.05, size=7, prob=2/3)
ks.test(c(1,2,3,4), y="pnorm")
pnorm(-1.5)
pbinom(1/6)
pbinom(28,51,2/3)
pbinom(29,51,2/3)
pbinom(31,51,2/3)
x=c(1/7,2/7,4/7,5/7,6/7,1)
x
ks.test(x, "pnorm", max=1, alternative = "two.sided")
ks.test(x, "pnorm", alternative = "two.sided")
ks.test(x, "pnorm", min=0, max=1, alternative = "two.sided")
ks.test(x, "pbiom", alternative = "two.sided")
ks.test(x, "pbinom", alternative = "two.sided")
ks.test(x, "pbinom")
x
x <- c(28,29,31,35,37,44)
qbinom(x,51,23)
qbinom(28,51,2/3)
pbinom(28,51,2/3)
pbinom(x,51,2/3)
x
x
pbinom(x,51,2/3)
0.053-1/7
0.053-1/6
X <- cbind(
c(1,1,1,1,1,1,1,1,1),
c(8.5,1,1.5,2,2.5,3,3.5,4,4.5),
c(0.25,1,2.25,4,6.25,9,12.25,16,20.25)
)
t(X) %*% X
X <- cbind(
c(1,1,1,1,1,1,1,1,1),
c(8.5,1.6,1.5,2,2.5,3,3.5,4,4.5),
c(0.25,1,2.25,4,6.25,9,12.25,16,20.25)
)
t(X) %*% X
X
X <- cbind(
c(1,1,1,1,1,1,1,1,1),
c(8.5,1.8,1.5,2,2.5,3,3.5,4,4.5),
c(0.25,1,2.25,4,6.25,9,12.25,16,20.25)
)
t(X) %*% X
X
t <- c(0.5,1,1.5,2,2.5,3,3.5,4,4.5)
h <- c(11,18,23,26,26,23,19,11,2)
X2 <- cbind(
c(1,1,1,1,1,1,1,1,1),
t,
-0.5*t^2
)
X2
t(X) %*% X
t(X2) %*% X2
X2 <- cbind(
c(1,1,1,1,1,1,1,1,1),
t,
t^2
)
t(X2) %*% X2
solve(t(X2) %*% X2) * t(X2)*h
solve(t(X2) %*% X2) %*% t(X2)%*%h
t
t^2
h
solve(t(X2) %*% X2) %*% t(X2)%*%h
beta_est <- solve(t(X2) %*% X2) %*% t(X2)%*%h
t(h) %*% h - t(beta_est)%*%t(X2)%*%h
h
t
#### Multiple Lineare Regression ####
data <- data.frame(
x1 <- t,
x2 <- t^2,
y <- h
)
lm.data <- lm(y ~ x1 + x2, data=data, x=TRUE)
summary(lm.data)
xmat <- lm.data$x
n <- length(data$y)
k <- ncol(xmat)-1
# Matrixberechnungen zur Ermittlung der Schaetzer fuer beta
xTx <- t(xmat) %*% xmat
xTx
xTx.inverse <- solve(xTx)
xTx.inverse
xTy <- t(xmat) %*% y
xTy
beta.hat <- xTx.inverse %*% xTy
beta.hat
# Matrixberechnungen zur Ermittlung der Modellvarianz
yTy <- t(y) %*% y
yTy
betaTxTy <- t(beta.hat) %*% t(xmat) %*% y
betaTxTy
SS.res <- yTy - betaTxTy
SS.res
sigma_dach_quadrat <- (SS.res)/(n-k-1)
sigma_dach_quadrat
sigma_dach <- sqrt(sigma_dach_quadrat)
sigma_dach
# Berechnungen zur Ermittlung von R^2
nYquer.sq <- n * mean(data$y)^2
nYquer.sq
SS.T <- yTy - nYquer.sq
SS.T
R.sq <- 1 - SS.res/SS.T
R.sq
R.sq.schlange <- 1 - (SS.res/(n-k-1))/(SS.T/(n-1))
R.sq.schlange
t(h) %*% h - t(beta_est)%*%t(X2)%*%h
0.79/7
0.79/7
k
0.79/(9-2)
## multiple lineare Regression mit zwei regressoren
mult_lin_reg_zwei_regressoren<- function(y,x1,x2) {
X = cbind(
c(seq(1,1, length.out=length(y))),
x1,
x2
)
Y <- cbind(
y
)
XTX <- t(X) %*% X
XTY <- t(X) %*% Y
beta_est <- solve(XTX) %*% XTY
SS_Res <- t(Y) %*% Y - t(beta_est) %*% XTY
var_est <- SS_Res / (nrow(Y) - 3)
print("XTX")
print(XTX)
print("XTY")
print(XTY)
print("beta_est")
print(beta_est)
print("SS_Res")
print(SS_Res)
}
mult_lin_reg_zwei_regressoren(h,t,t^2)
## multiple lineare Regression mit zwei regressoren
mult_lin_reg_zwei_regressoren<- function(y,x1,x2) {
X = cbind(
c(seq(1,1, length.out=length(y))),
x1,
x2
)
Y <- cbind(
y
)
XTX <- t(X) %*% X
XTY <- t(X) %*% Y
beta_est <- solve(XTX) %*% XTY
SS_Res <- t(Y) %*% Y - t(beta_est) %*% XTY
var_est <- SS_Res / (nrow(Y) - 3)
print("XTX")
print(XTX)
print("XTY")
print(XTY)
print("beta_est")
print(beta_est)
print("SS_Res")
print(SS_Res)
print(var_est)
}
mult_lin_reg_zwei_regressoren(h,t,t^2)
var(0.1318)
sqrt(0.1318)
sqrt(0.131746)
h
t
h
summary(h~t+t^2)
summary(lm(h~t+t^2))
t
t^2
i <- t^2
summary(h~t+i)
summary((lm(h~t+i)))
1.071429 / sqrt(0.1318*1.6190476)
qt(0.975,6)
pt(0.975,6)
qnorm(0.975)
qnorm(0.9)
qnorm(0.95)
2.26^2
2.27^2
2.266666666^2
2.266666666666666666666666666666^2
beta_est
x0 <- c(1,2.2667,5.1378)
y0 <- t(x0)%*%beta_est
y0
xTx.inverse
pt(0.975,6)
qt(0.975,6)
sigma_dach_quadrat
5-sigma_dach_quadrat
qt(0.975,6)*sqrt(sigma_dach_quadrat * (1+ t(x0)%*%xTx.inverse%*%x0))
x.0 <- c(1,2.2667,5.1378)
x.0 %*% beta.hat
x.0 %*% beta.hat - quantile * sigma_dach * sqrt((1 + t(x.0) %*% xTx.inverse %*% x.0))
x.0 %*% beta.hat + quantile * sigma_dach * sqrt((1 + t(x.0) %*% xTx.inverse %*% x.0))
# Berechnungen zur Ermittlung von R^2
nYquer.sq <- n * mean(data$y)^2
nYquer.sq
SS.T <- yTy - nYquer.sq
SS.T
R.sq <- 1 - SS.res/SS.T
R.sq
R.sq.schlange <- 1 - (SS.res/(n-k-1))/(SS.T/(n-1))
R.sq.schlange
summary(lm(h~t+(t^2))
)
summary(lm(h~t+i)
)
SS.res
f <- c(13,15,17,18,22,23,24,28,30,31)
g <- c(16,19,21,25,26,32,33,34,35,37)
mean(f)
mean(g)
mean(f)
mean(g)
var(f)
var(g)
t.test(f,g)
tstat <- (f.quer-g.quer) / 0.2 * ((9*f.var+9*g.var)/18)
f.quer <- mean(f)
g.quer <- mean(g)
f.var <- var(f)
g.var <- var(g)
tstat <- (f.quer-g.quer) / 0.2 * ((9*f.var+9*g.var)/18)
fstat
tstat
tstat <- (f.quer-g.quer) / (0.2 * ((9*f.var+9*g.var)/18))
tstat
teil1 <- f.quer-g.quer
teil2 <- 9*f.var + 9*g.var
tstat <- teil1 / (0.2* (teil2/18))
tstat
teil1 <- f.quer-g.quer
teil2 <- 9*f.var + 9*g.var
tstat <- sqrt(teil1 / (0.2* (teil2/18)))
tstat
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
tstat <- sqrt(teil1/teil2)
tstat
eil1
teil1
teil2
tstat <- sqrt( teil1 / teil2)
tstat <- sqrt( teil1 / teil2)
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil3 <- teil1/teil2
tstat <- sqrt(teil3)
tstat
tstat <- sqrt(teil3)
?sqrt
sqrt(5)
teil3
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil3 <- teil1/teil2
tstat <- sqrt(teil3[3])
tstat
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil3 <- teil1/teil2
tstat <- sqrt(teil3[1])
tstat
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil3 <- teil1/teil2
tstat <- sqrt(teil3[1])
tstat
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil3 <- teil1/teil2
tstat <- sqrt(teil3[1])
tstat
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil3 <- teil1/teil2
tstat <- sqrt(teil3[1])
tstat
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil3 <- teil1/teil2
tstat <- sqrt(teil3[1])
tstat
teil1 <- f.quer-g.quer
teil2 <- 0.2*((9*f.var + 9*g.var)/18)
teil3 <- teil1/teil2
tstat <- sqrt(teil3[1])
tstat
tstat <- sqrt((f.quer-g.quer)/(0.2*((9*f.var + 9*g.var)/18)))
tstat
tstat <- sqrt((f.quer-g.quer)/(0.2*((9*f.var + 9*g.var)/18)))
tstat
tstat <- sqrt((f.quer-g.quer)/(0.2*((9*f.var + 9*g.var)/18)))
tstat
sqrt(-0.8)
tstat <- (f.quer-g.quer)/sqrt((0.2*((9*f.var + 9*g.var)/18)))
tstat
qt(0.975,18)
scmdate <- data.frame(
x=c(15,25,31,17,32,14,40,35,23,37),
y=c(3,10,8,5,10,4,2,9,8,7)
)
scmdata <- data.frame(
x=c(15,25,31,17,32,14,40,35,23,37),
y=c(3,10,8,5,10,4,2,9,8,7)
)
plot(scmdata$x,scmdata$y)
summary(lm(y~x, data=scmdata))
summary (lm( y~x +I( x ^2) ,data = scmdata ) )
summary (lm( y~x +I( x ^2) ,data = scmdata ) )
xtable ( solve (t(lm( y~x +I( x ^2) ,data = scmdata , x = TRUE )$x ) %*%lm( y~x +I( x ^2) ,
data = scmdata , x = TRUE )$x ) , digits =4)
I(x^2)
?I
coef <- summary (lm( y~x +I(x^2) ,data = scmdata ) )$coef
abline()
coef
coef <- summary (lm( y~x +I(x^2) ,data = scmdata ) )$coef
plot(scmdata$x,scmdata$y)
abline(coef[1,1],coef[1,2,coef[1,3]])
qt(0.975,7)
install.packages("MDPtoolbox")
devtools::install_github("nproellochs/ReinforcementLearning")
newlist <- c(100,100,100)
str(newlist)
l <- []
l.append([100,120,130])
l <- list(100,120,130)
str(list)
str(l)
# Convert list to vector
li <- list('A','B','C')
v <- unlist(li)
print(v)
print(typeof(v))
v <- unlist(l)
v
l <- list(100,120,130)
l <- list(100,120,130)
str(l)
v <- unlist(l)
v
setwd("~/BachelorArbeit/Blossom_ONE")
l <- list(100,120,130)
str(l)
write.table(unlist(inputData), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
l <- list(100,120,130)
str(l)
write.table(unlist(l), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
l <- list(100,120,130)
str(l)
write.table(data.frameunlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
l <- list(100,120,130)
str(l)
write.table(data.frame(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
l <- list(100,120,130)
str(l)
write.table(data.frame(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
l <- list(100,120,130)
str(l)
write.table(data.frame(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
# defining the data for the csv file
# data is organised into 4 columns
data = data.frame(ID = 1:4, Name = c("A","B","C","D"),
Post=c("Peon","SDE","Manager","SDE"),
Age = c(23,39,28,39))
# write data to a sample.csv file
write.table(data, file = "sample.csv")
# defining a row
row <- data.frame('1', 'A', 'Manager', '24')
# sample csv name
csv_fname = "sample.csv"
# writing row in the csv file
write.table(row, file = csv_fname, sep = ",",
append = TRUE, quote = FALSE,
col.names = FALSE, row.names = FALSE)
# defining the data for the csv file
# data is organised into 4 columns
data = data.frame(ID = 1:4, Name = c("A","B","C","D"),
Post=c("Peon","SDE","Manager","SDE"),
Age = c(23,39,28,39))
# write data to a sample.csv file
write.table(data, file = "sample.csv")
# defining a row
row <- data.frame('1', 'A', 'Manager', '24')
# sample csv name
csv_fname = "sample.csv"
# writing row in the csv file
write.table(row, file = csv_fname, sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
fg
l <- list(100,120,130)
str(l)
unlist(l)
v <- unlist(l)
v
print(v)
df <- data.frame(inputData = v)
df
df <- data.frame(inputData = c(v))
df
a<-structure(list(X2005 = structure(list(hours = list(c(0.2, 0,
4), c(0.2, 4)), maxx = structure(list(maxh2 = 4, maxh3 = 4), .Names = c("maxh2",
a
write.csv(do.call("rbind",list(unlist(l))),"testme.csv")
write.csv(do.call("rbind",list(unlist(l))),"testme.csv")
rbind(list(unlist(l)))
unlist(l)
list(unlist(l)
)
write.table(list(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
write.table(list(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
write.table(list(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
write.table(list(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
write.table(list(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
write.table(list(unlist(l)), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
list(unlist(l))
write.table(paste(nlist(l),collapse=" ")u), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
write.table(paste(unlist(l),collapse=" ")), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
write.table(paste(unlist(l),collapse=" "), file = "inputDataClusterAnalysisR.csv", sep = ",",
append = TRUE, quote = TRUE,
col.names = FALSE, row.names = FALSE)
sl <- list(list("A"))
sl
sl <- list("A","B","C")
sl
l <- list(100,120,130)
df <- data.frame(col1=sl,
col2=l)
df
# Defining lists
n <- list("A","B","C")
l <- list(100,120,130)
# Convert lists into dataframe columns
df <- data.frame(unlist(n), unlist(l))
# Names of columns of dataframe
names(df) <- c("NodeID", "Drection")
# Print dataframe
cat("The dataframe is :\n")
print(df)
# Defining lists
n <- list("A","B","C")
l <- list(100,120,130)
# Convert lists into dataframe columns
df <- data.frame(unlist(l))
# Names of columns of dataframe
names(df) <- c("Drection")
rownames(df) <- unlist(l)
# Print dataframe
cat("The dataframe is :\n")
print(df)
# Defining lists
n <- list("A","B","C")
l <- list(100,120,130)
# Convert lists into dataframe columns
df <- data.frame(unlist(l))
# Names of columns of dataframe
names(df) <- c("Drection")
rownames(df) <- unlist(n)
# Print dataframe
cat("The dataframe is :\n")
print(df)
